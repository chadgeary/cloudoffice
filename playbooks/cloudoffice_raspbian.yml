---
- name: cloudoffice for raspbian
  hosts: localhost
  connection: local
  gather_facts: true
  become: true
  become_user: root
  tasks:

    - name: if not defined, set duckdns_domain to blank value
      set_fact:
        duckdns_domain: "{% if duckdns_domain is not defined %}{% else %}{{ duckdns_domain }}{% endif %}"

    - name: if not defined, set duckdns_token to blank value
      set_fact:
        duckdns_token: "{% if duckdns_token is not defined %}{% else %}{{ duckdns_token }}{% endif %}"

    - name: if not defined, set letsencrypt_email to blank value
      set_fact:
        letsencrypt_email: "{% if letsencrypt_email is not defined %}{% else %}{{ letsencrypt_email }}{% endif %}"

    - name: if not defined, set docker_duckdnsupdater to blank value
      set_fact:
        docker_duckdnsupdater: "{% if docker_duckdnsupdater is not defined %}{% else %}{{ docker_duckdnsupdater }}{% endif %}"

    - name: if not defined, set docker_onlyoffice to blank value
      set_fact:
        docker_onlyoffice: "{% if docker_onlyoffice is not defined %}{% else %}{{ docker_onlyoffice }}{% endif %}"

    - name: add docker apt key
      apt_key:
        url: https://download.docker.com/linux/raspbian/gpg
        state: present

    - name: add docker apt repo
      apt_repository:
        repo: deb [arch=armhf] https://download.docker.com/linux/raspbian buster stable
        state: present

    - name: required packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - docker-ce
          - libcap2-bin
          - python3-pip
          - raspberrypi-kernel-headers
          - ssl-cert
        state: latest
        update_cache: yes

    - name: ansible docker system python
      pip:
        name:
          - ansible
          - docker
        executable: /usr/bin/pip3
        state: latest

    - name: docker service started/enabled
      systemd:
        name: docker
        state: started
        enabled: True

    - name: db user
      user:
        name: nextclouddb
        shell: /bin/bash
        create_home: False
      register: db_user

    - name: set ip fact for webproxy
      set_fact:
        instance_public_ip: "{% if instance_public_ip is not defined %}{{ ansible_default_ipv4.address }}{% else %}{{ instance_public_ip }}{% endif %}"

    - name: web_port if not defined
      set_fact:
        web_port: "{% if web_port is not defined %}443{% else %}{{ web_port }}{% endif %}"

    - name: project_directory if not defined
      set_fact:
        project_directory: "{% if project_directory is not defined %}/opt{% else %}{{ project_directory }}{% endif %}"

    - name: various container directories - application
      file:
        path: "{{ item }}"
        state: directory
        owner: www-data
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_application"
        - "{{ project_directory }}/nextcloud_application/var"
        - "{{ project_directory }}/nextcloud_application/var/www"
        - "{{ project_directory }}/nextcloud_application/var/www/html"
        - "{{ project_directory }}/nextcloud_application/var/www/html/custom_apps"
        - "{{ project_directory }}/nextcloud_application/var/www/html/config"
        - "{{ project_directory }}/nextcloud_application/var/www/html/data"

    - name: various container directories - webproxy
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_webproxy"
        - "{{ project_directory }}/nextcloud_webproxy/nginx"
        - "{{ project_directory }}/nextcloud_webproxy/nginx/proxy-confs"

    - name: various container directories - db
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ db_user.name }}"
        group: "{{ db_user.group }}"
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_database"

    - name: secure web proxy
      template:
        src: "{{ item }}"
        dest: "/{{ project_directory }}/nextcloud_webproxy/{{ item }}"
        owner: root
        group: root
        mode: 0444
      with_items:
        - httpd-ssl.conf
        - httpd.conf
        - nginx/nginx.conf
        - nginx/proxy-confs/cloudoffice.conf
      register: proxy_conf_files

    - name: Determine admin_password file exists
      stat:
        path: "{{ project_directory }}/nextcloud_application/admin_password"
      register: admin_password_file

    - name: Generate admin_password if not exists
      set_fact:
        admin_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
      when: admin_password_file.stat.exists|bool == False
      no_log: True

    - name: Set admin_password if not exists
      lineinfile:
        path: "{{ project_directory }}/nextcloud_application/admin_password"
        create: yes
        owner: root
        group: root
        mode: '0600'
        line: "{{ admin_password }}"
      when: admin_password_file.stat.exists|bool == False

    - name: Determine db_password file exists
      stat:
        path: "{{ project_directory }}/nextcloud_application/db_password"
      register: db_password_file

    - name: Generate db_password if not exists
      set_fact:
        db_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
      when: db_password_file.stat.exists|bool == False
      no_log: True

    - name: Set db_password if not     exists
      lineinfile:
        path: "{{ project_directory }}/nextcloud_application/db_password"
        create: yes
        owner: root
        group: root
        mode: '0600'
        line: "{{ db_password }}"
      when: db_password_file.stat.exists|bool == False

    - name: Get admin_password if exists
      slurp:
        src: "{{ project_directory }}/nextcloud_application/admin_password"
      register: admin_password_content
      when: admin_password_file.stat.exists|bool == True

    - name: Get db_password if exists
      slurp:
        src: "{{ project_directory }}/nextcloud_application/db_password"
      register: db_password_content
      when: db_password_file.stat.exists|bool == True

    - name: Register admin_password if exists
      set_fact:
        admin_password: "{{ admin_password_content['content'] | b64decode | trim }}"
      when: admin_password_file.stat.exists|bool == True

    - name: Register db_password if exists
      set_fact:
        db_password: "{{ db_password_content['content'] | b64decode | trim }}"
      when: db_password_file.stat.exists|bool == True

    - name: docker network
      docker_network:
        name: cloudoffice
        driver: bridge
        ipam_config:
          - subnet: "{{ docker_network }}/24"
            gateway: "{{ docker_gw }}"

    - name: db container
      docker_container:
        name: cloudoffice_database
        hostname: cloudofficedatabase
        image: linuxserver/mariadb:latest
        networks:
          - name: cloudoffice
            ipv4_address: "{{ docker_db }}"
        env:
          MYSQL_ROOT_PASSWORD: "{{ admin_password }}"
          MYSQL_PASSWORD: "{{ db_password }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_USER: nextcloud
          PUID: "{{ db_user.uid }}"
          PGID: "{{ db_user.group }}"
        volumes:
          - "{{ project_directory }}/nextcloud_database:/config:rw"
        pull: yes
        purge_networks: yes
        restart_policy: "always"
        container_default_behavior: "compatibility"
      register: db_container

    - name: web proxy container
      docker_container:
        name: cloudoffice_webproxy
        hostname: cloudofficewebproxy
        image: httpd:2.4
        networks:
          - name: cloudoffice
            ipv4_address: "{{ docker_webproxy }}"
        ports:
          - "{{ web_port }}:{{ web_port }}"
        volumes:
          - "{{ project_directory }}/nextcloud_webproxy/httpd-ssl.conf:/usr/local/apache2/conf/extra/httpd-ssl.conf:ro"
          - "{{ project_directory }}/nextcloud_webproxy/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro"
          - /etc/ssl/certs/ssl-cert-snakeoil.pem:/usr/local/apache2/conf/server.crt:ro
          - /etc/ssl/private/ssl-cert-snakeoil.key:/usr/local/apache2/conf/server.key:ro
        restart: yes
        pull: yes
        purge_networks: yes
        restart_policy: "always"
        container_default_behavior: "compatibility"
        restart: "{% if proxy_conf_files.changed %}yes{% else %}no{% endif %}"
      when: duckdns_domain == ""

    - name: duckdnsupdater container
      docker_container:
        name: cloudoffice_duckdnsupdater
        hostname: cloudoffice_duckdnsupdater
        image: ghcr.io/linuxserver/duckdns
        networks:
          - name: cloudoffice
            ipv4_address: "{{ docker_duckdnsupdater }}"
        env:
          PUID: "1000"
          PGID: "1000"
          TZ: "UTC"
          SUBDOMAINS: "{{ duckdns_domain.split('.')[0] }}"
          TOKEN: "{{ duckdns_token }}"
        pull: yes
        purge_networks: yes
        restart_policy: "always"
        container_default_behavior: "compatibility"
      when: duckdns_domain != ""

    - name: duckdns web proxy container
      docker_container:
        name: cloudoffice_webproxy
        hostname: cloudofficewebproxy
        image: ghcr.io/linuxserver/swag
        networks:
          - name: cloudoffice
            ipv4_address: "{{ docker_webproxy }}"
        env:
          PUID: "1000"
          PGID: "1000"
          TZ: "UTC"
          URL: "{{ duckdns_domain }}"
          DUCKDNSTOKEN: "{{ duckdns_token }}"
          EMAIL: "{{ letsencrypt_email }}"
          VALIDATION: "duckdns"
        ports:
          - "{{ web_port }}:443"
        volumes: "{{ project_directory }}/nextcloud_webproxy:/config"
        pull: yes
        purge_networks: yes
        restart_policy: "always"
        container_default_behavior: "compatibility"
        restart: "{% if proxy_conf_files.changed %}yes{% else %}no{% endif %}"
      when: duckdns_domain != ""

    - name: wait for db container
      wait_for:
        host: "{{ docker_db }}"
        port: 3306
        timeout: 120

    - name: nextcloud container
      docker_container:
        name: cloudoffice_nextcloud
        hostname: cloudofficenextcloud
        image: nextcloud:latest
        networks:
          - name: cloudoffice
            ipv4_address: "{{ docker_nextcloud }}"
        env:
          NEXTCLOUD_ADMIN_PASSWORD: "{{ admin_password }}"
          NEXTCLOUD_ADMIN_USER: ncadmin
          NEXTCLOUD_TRUSTED_DOMAINS: "{{ instance_public_ip }} {{ docker_webproxy }} {{ docker_nextcloud }} {{ duckdns_domain }}"
          TRUSTED_PROXIES: "{{ instance_public_ip }} {{ docker_webproxy }} {{ duckdns_domain }}"
          OVERWRITEHOST: "{% if duckdns_domain != '' %}{{ duckdns_domain }}:{{ web_port }}{% else %}{{ instance_public_ip }}:{{ web_port }}{% endif %}"
          OVERWRITEPROTOCOL: https
          MYSQL_PASSWORD: "{{ db_password }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_USER: nextcloud
          MYSQL_HOST: "{{ docker_db }}"
        volumes:
          - "{{ project_directory }}/nextcloud_application/var/www/html:/var/www/html:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/custom_apps:/var/www/html/custom_apps:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/config:/var/www/html/config:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/data:/var/www/html/data:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/themes:/var/www/html/themes:rw"
        pull: yes
        purge_networks: yes
        restart_policy: "always"
        container_default_behavior: "compatibility"

    - name: nextcloud talk scripts (clear)
      file:
        path: "{{ project_directory }}/nextcloud_application/nextcloud-{{ item }}.sh"
        state: absent
      with_items:
        - talk

    - name: nextcloud talk (set)
      lineinfile:
        path: "{{ project_directory }}/nextcloud_application/nextcloud-talk.sh"
        create: yes
        owner: root
        group: root
        mode: '0500'
        line: "{{ item }}"
      with_items:
        - "#!/bin/bash"
        - "# install spreed (talk)"
        - "docker exec --user www-data cloudoffice_nextcloud php occ app:install spreed"
        - "docker exec --user www-data cloudoffice_nextcloud php occ app:enable spreed"

    - name: wait for nextcloud 200OK
      uri:
        url: "{% if duckdns_domain != '' %}https://{{ duckdns_domain }}:{{ web_port }}/nc/login{% else %}https://127.0.0.1:{{ web_port }}/login{% endif %}"
        status_code: 200
        validate_certs: no
      register: nc_wait_result
      until: nc_wait_result.status == 200
      retries: 180
      delay: 1

    - name: nextcloud talk (execute)
      shell:
        cmd: "{{ project_directory }}/nextcloud_application/nextcloud-{{ item }}.sh"
      args:
        executable: /bin/bash
      no_log: True
      with_items:
        - talk

    - name: clear service and timer files
      file:
        path: "/etc/systemd/system/nextcloudcron.{{ item }}"
        state: absent
      with_items:
        - service
        - timer

    - name: nextcloud background jobs systemd service
      lineinfile:
        path: /etc/systemd/system/nextcloudcron.service
        create: yes
        owner: root
        group: root
        mode: '0644'
        line: "{{ item }}"
      with_items:
        - "[Unit]"
        - "Description=Nextcloud cron.php service"
        - " "
        - "[Service]"
        - "User=root"
        - "ExecStart=/usr/bin/docker exec -u www-data cloudoffice_nextcloud /bin/bash -c '/usr/local/bin/php -f /var/www/html/cron.php'"
        - "  "
        - "[Install]"
        - "WantedBy=basic.target"

    - name: nextcloud background jobs systemd timer
      lineinfile:
        path: /etc/systemd/system/nextcloudcron.timer
        create: yes
        owner: root
        group: root
        mode: '0644'
        line: "{{ item }}"
      with_items:
        - "[Unit]"
        - "Description=Nextcloud cron.php via Timer"
        - " "
        - "[Timer]"
        - "OnBootSec=5min"
        - "OnUnitActiveSec=5min"
        - "Unit=nextcloudcron.service"
        - "  "
        - "[Install]"
        - "WantedBy=timers.target"

    - name: nextcloud background jobs start/enable
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
        daemon_reload: yes
      with_items:
        - nextcloudcron.timer
        - nextcloudcron.service

    - name: Playbook Summary
      debug:
        msg:
          - "CloudOffice completed installation!"
          - "Nextcloud WebUI: https://{% if instance_public_ip is not defined %}{{ ansible_default_ipv4.address }}{% else %}{{ instance_public_ip }}{% endif %}:{{ web_port }}"
