---
- name: Cloudoffice for ubuntu
  hosts: localhost
  connection: local
  become: true
  become_user: root
  tasks:

    - name: If not defined, set duckdns_domain to blank value
      ansible.builtin.set_fact:
        duckdns_domain: "{% if duckdns_domain is not defined %}{% else %}{{ duckdns_domain }}{% endif %}"

    - name: If not defined, set duckdns_token to blank value
      ansible.builtin.set_fact:
        duckdns_token: "{% if duckdns_token is not defined %}{% else %}{{ duckdns_token }}{% endif %}"

    - name: If not defined, set letsencrypt_email to blank value
      ansible.builtin.set_fact:
        letsencrypt_email: "{% if letsencrypt_email is not defined %}{% else %}{{ letsencrypt_email }}{% endif %}"

    - name: If not defined, set docker_duckdnsupdater to blank value
      ansible.builtin.set_fact:
        docker_duckdnsupdater: "{% if docker_duckdnsupdater is not defined %}{% else %}{{ docker_duckdnsupdater }}{% endif %}"

    - name: Check swap file exists
      ansible.builtin.stat:
        path: /opt/swap.file
      register: swap_file

    - name: Create swap file if not exists
      ansible.builtin.shell: |
        dd if=/dev/zero of=/opt/swap.file bs=1024 count=1048576
        mkswap /opt/swap.file
      when:
        not swap_file.stat.exists

    - name: Set swap file permissions
      ansible.builtin.file:
        path: /opt/swap.file
        state: file
        owner: root
        group: root
        mode: '0600'

    - name: Set swap mount
      ansible.builtin.mount:
        src: /opt/swap.file
        path: none
        fstype: swap
        opts: sw
        passno: '0'
        dump: '0'
        state: present

    - name: Mount swap now
      ansible.builtin.shell: |
        swapon {{ project_directory }}/swap.file
      when:
        ansible_swaptotal_mb < 1

    - name: Required packages
      ansible.builtin.apt:
        pkg:
          - docker.io
          - libcap2-bin
          - python3-pip
          - ssl-cert
        state: latest
        update_cache: true

    - name: Docker and boto python packages
      ansible.builtin.pip:
        name:
          - docker
        executable: /usr/bin/pip3
        state: latest

    - name: IP Forwarding enable/persist
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: true
        sysctl_set: true
        sysctl_file: /etc/sysctl.conf

    - name: Docker service started/enabled
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    - name: Db user
      ansible.builtin.user:
        name: nextclouddb
        shell: /bin/bash
        create_home: false
      register: db_user

    - name: Set ip fact for webproxy
      ansible.builtin.set_fact:
        instance_public_ip: "{% if instance_public_ip is not defined %}{{ ansible_default_ipv4.address }}{% else %}{{ instance_public_ip }}{% endif %}"

    - name: Various container directories - application
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: www-data
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_application"
        - "{{ project_directory }}/nextcloud_application/var"
        - "{{ project_directory }}/nextcloud_application/var/www"
        - "{{ project_directory }}/nextcloud_application/var/www/html"
        - "{{ project_directory }}/nextcloud_application/var/www/html/custom_apps"
        - "{{ project_directory }}/nextcloud_application/var/www/html/config"
        - "{{ project_directory }}/nextcloud_application/var/www/html/data"

    - name: Various container directories - webproxy
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_webproxy"
        - "{{ project_directory }}/nextcloud_webproxy/nginx"
        - "{{ project_directory }}/nextcloud_webproxy/nginx/site-confs"
        - "{{ project_directory }}/nextcloud_webproxy/nginx/proxy-confs"

    - name: Various container directories - db
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ db_user.name }}"
        group: "{{ db_user.group }}"
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_database"

    - name: Various container directories - onlyoffice
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: '104'
        group: '107'
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_onlyoffice"
        - "{{ project_directory }}/nextcloud_onlyoffice/certs"

    - name: Web_port if not defined
      ansible.builtin.set_fact:
        web_port: "{% if web_port is not defined %}443{% else %}{{ web_port }}{% endif %}"

    - name: Secure web proxy
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/{{ project_directory }}/nextcloud_webproxy/{{ item }}"
        owner: root
        group: root
        mode: 0444
      with_items:
        - httpd-ssl.conf
        - httpd.conf
        - nginx/site-confs/default.conf
        - nginx/nginx.conf
        - nginx/proxy-confs/cloudoffice.conf
      register: proxy_conf_files

    - name: Determine admin_password file exists
      ansible.builtin.stat:
        path: "{{ project_directory }}/nextcloud_application/admin_password"
      register: admin_password_file

    - name: Generate admin_password if not exists
      ansible.builtin.set_fact:
        admin_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
      when: not admin_password_file.stat.exists
      no_log: true

    - name: Set admin_password if not exists
      ansible.builtin.lineinfile:
        path: "{{ project_directory }}/nextcloud_application/admin_password"
        create: true
        owner: root
        group: root
        mode: '0600'
        line: "{{ admin_password }}"
      when: not admin_password_file.stat.exists

    - name: Determine db_password file exists
      ansible.builtin.stat:
        path: "{{ project_directory }}/nextcloud_application/db_password"
      register: db_password_file

    - name: Generate db_password if not exists
      ansible.builtin.set_fact:
        db_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
      when: not db_password_file.stat.exists
      no_log: true

    - name: Set db_password if not exists
      ansible.builtin.lineinfile:
        path: "{{ project_directory }}/nextcloud_application/db_password"
        create: true
        owner: root
        group: root
        mode: '0600'
        line: "{{ db_password }}"
      when: not db_password_file.stat.exists

    - name: Determine oo_password file exists
      ansible.builtin.stat:
        path: "{{ project_directory }}/nextcloud_application/oo_password"
      register: oo_password_file

    - name: Generate oo_password if not exists
      ansible.builtin.set_fact:
        oo_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
      when: not oo_password_file.stat.exists
      no_log: true

    - name: Set oo_password if not exists
      ansible.builtin.lineinfile:
        path: "{{ project_directory }}/nextcloud_application/oo_password"
        create: true
        owner: root
        group: root
        mode: '0600'
        line: "{{ oo_password }}"
      when: not oo_password_file.stat.exists

    - name: Get admin_password if exists
      ansible.builtin.slurp:
        src: "{{ project_directory }}/nextcloud_application/admin_password"
      register: admin_password_content
      when: admin_password_file.stat.exists

    - name: Get db_password if exists
      ansible.builtin.slurp:
        src: "{{ project_directory }}/nextcloud_application/db_password"
      register: db_password_content
      when: db_password_file.stat.exists

    - name: Get oo_password if exists
      ansible.builtin.slurp:
        src: "{{ project_directory }}/nextcloud_application/oo_password"
      register: oo_password_content
      when: oo_password_file.stat.exists

    - name: Register admin_password if exists
      ansible.builtin.set_fact:
        admin_password: "{{ admin_password_content['content'] | b64decode | trim }}"
      when: admin_password_file.stat.exists

    - name: Register db_password if exists
      ansible.builtin.set_fact:
        db_password: "{{ db_password_content['content'] | b64decode | trim }}"
      when: db_password_file.stat.exists

    - name: Register oo_password if exists
      ansible.builtin.set_fact:
        oo_password: "{{ oo_password_content['content'] | b64decode | trim }}"
      when: oo_password_file.stat.exists

    - name: Docker network
      community.docker.docker_network:
        name: cloudoffice
        driver: bridge
        ipam_config:
          - subnet: "{{ docker_network }}/24"
            gateway: "{{ docker_gw }}"

    - name: Db container
      community.docker.docker_container:
        name: cloudoffice_database
        hostname: cloudofficedatabase
        image: linuxserver/mariadb:latest
        networks:
          - name: Cloudoffice
            ipv4_address: "{{ docker_db }}"
        env:
          MYSQL_ROOT_PASSWORD: "{{ admin_password }}"
          MYSQL_PASSWORD: "{{ db_password }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_USER: nextcloud
          PUID: "{{ db_user.uid }}"
          PGID: "{{ db_user.group }}"
        volumes:
          - "{{ project_directory }}/nextcloud_database:/config:rw"
        pull: true
        purge_networks: true
        restart_policy: "always"
      no_log: true

    - name: Web proxy container
      community.docker.docker_container:
        name: cloudoffice_webproxy
        hostname: cloudofficewebproxy
        image: httpd:2.4
        networks:
          - name: Cloudoffice
            ipv4_address: "{{ docker_webproxy }}"
        ports:
          - "{{ web_port }}:{{ web_port }}"
        volumes:
          - "{{ project_directory }}/nextcloud_webproxy/httpd-ssl.conf:/usr/local/apache2/conf/extra/httpd-ssl.conf:ro"
          - "{{ project_directory }}/nextcloud_webproxy/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro"
          - /etc/ssl/certs/ssl-cert-snakeoil.pem:/usr/local/apache2/conf/server.crt:ro
          - /etc/ssl/private/ssl-cert-snakeoil.key:/usr/local/apache2/conf/server.key:ro
        pull: true
        purge_networks: true
        networks_cli_compatible: false
        restart_policy: "always"
        restart: "{% if proxy_conf_files.changed %}true{% else %}false{% endif %}"
      when: duckdns_domain == ""

    - name: Duckdnsupdater container
      community.docker.docker_container:
        name: cloudoffice_duckdnsupdater
        hostname: cloudoffice_duckdnsupdater
        image: ghcr.io/linuxserver/duckdns
        networks:
          - name: Cloudoffice
            ipv4_address: "{{ docker_duckdnsupdater }}"
        env:
          PUID: "1000"
          PGID: "1000"
          TZ: "UTC"
          SUBDOMAINS: "{{ duckdns_domain.split('.')[0] }}"
          TOKEN: "{{ duckdns_token }}"
        pull: true
        purge_networks: true
        networks_cli_compatible: false
        restart_policy: "always"
      when: duckdns_domain != ""

    - name: Duckdns web proxy container
      community.docker.docker_container:
        name: cloudoffice_webproxy
        hostname: cloudofficewebproxy
        image: ghcr.io/linuxserver/swag
        networks:
          - name: Cloudoffice
            ipv4_address: "{{ docker_webproxy }}"
        env:
          PUID: "1000"
          PGID: "1000"
          TZ: "UTC"
          URL: "{{ duckdns_domain }}"
          DUCKDNSTOKEN: "{{ duckdns_token }}"
          EMAIL: "{{ letsencrypt_email }}"
          VALIDATION: "duckdns"
        ports:
          - "{{ web_port }}:443"
        volumes: "{{ project_directory }}/nextcloud_webproxy:/config"
        pull: true
        purge_networks: true
        networks_cli_compatible: false
        restart_policy: "always"
        restart: "{% if proxy_conf_files.changed %}true{% else %}false{% endif %}"
      when: duckdns_domain != ""

    - name: Wait for db container
      ansible.builtin.wait_for:
        host: "{{ docker_db }}"
        port: 3306
        timeout: 120

    - name: Nextcloud container
      community.docker.docker_container:
        name: cloudoffice_nextcloud
        hostname: cloudofficenextcloud
        image: nextcloud:latest
        networks:
          - name: Cloudoffice
            ipv4_address: "{{ docker_nextcloud }}"
        env:
          NEXTCLOUD_ADMIN_PASSWORD: "{{ admin_password }}"
          NEXTCLOUD_ADMIN_USER: ncadmin
          NEXTCLOUD_TRUSTED_DOMAINS: "{{ instance_public_ip }} {{ docker_webproxy }} {{ docker_nextcloud }} {{ duckdns_domain }}"
          TRUSTED_PROXIES: "{{ instance_public_ip }} {{ docker_webproxy }} {{ duckdns_domain }}"
          OVERWRITEHOST: "{% if duckdns_domain != '' %}{{ duckdns_domain }}:{{ web_port }}{% else %}{{ instance_public_ip }}:{{ web_port }}{% endif %}"
          OVERWRITEWEBROOT: "{% if duckdns_domain != '' %}/nc{% else %}{% endif %}"
          OVERWRITEPROTOCOL: https
          MYSQL_PASSWORD: "{{ db_password }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_USER: nextcloud
          MYSQL_HOST: "{{ docker_db }}"
        volumes:
          - "{{ project_directory }}/nextcloud_application/var/www/html:/var/www/html:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/custom_apps:/var/www/html/custom_apps:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/config:/var/www/html/config:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/data:/var/www/html/data:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/themes:/var/www/html/themes:rw"
        pull: true
        purge_networks: true
        restart_policy: "always"
      no_log: true

    - name: Onlyoffice container
      community.docker.docker_container:
        name: cloudoffice_onlyoffice
        hostname: cloudofficeonlyoffice
        image: onlyoffice/documentserver
        networks:
          - name: Cloudoffice
            ipv4_address: "{{ docker_onlyoffice }}"
        env:
          ONLYOFFICE_HTTPS_HSTS_ENABLED: "false"
          USE_UNAUTHORIZED_STORAGE: "true"
          JWT_ENABLED: "true"
          JWT_SECRET: "{{ oo_password }}"
        volumes:
          - /opt/nextcloud_onlyoffice:/var/www/onlyoffice/Data:rw
          - /etc/ssl/certs/ssl-cert-snakeoil.pem:/var/www/onlyoffice/Data/certs/onlyoffice.crt:ro
          - /etc/ssl/private/ssl-cert-snakeoil.key:/var/www/onlyoffice/Data/certs/onlyoffice.key:ro
        ports:
          - "{{ oo_port }}:443"
        pull: true
        purge_networks: true
        restart_policy: "always"
        auto_remove: false
        detach: true
        init: false
        interactive: false
        memory: "0"
        paused: false
        read_only: false
        tty: true
      no_log: true
      when: duckdns_domain == ""

    - name: Onlyoffice container
      community.docker.docker_container:
        name: cloudoffice_onlyoffice
        hostname: cloudofficeonlyoffice
        image: onlyoffice/documentserver
        networks:
          - name: Cloudoffice
            ipv4_address: "{{ docker_onlyoffice }}"
        env:
          ONLYOFFICE_HTTPS_HSTS_ENABLED: "false"
          USE_UNAUTHORIZED_STORAGE: "true"
          JWT_ENABLED: "true"
          JWT_SECRET: "{{ oo_password }}"
        volumes:
          - /opt/nextcloud_onlyoffice:/var/www/onlyoffice/Data:rw
          - /etc/ssl/certs/ssl-cert-snakeoil.pem:/var/www/onlyoffice/Data/certs/onlyoffice.crt:ro
          - /etc/ssl/private/ssl-cert-snakeoil.key:/var/www/onlyoffice/Data/certs/onlyoffice.key:ro
        pull: true
        purge_networks: true
        restart_policy: "always"
        auto_remove: false
        detach: true
        init: false
        interactive: false
        memory: "0"
        paused: false
        read_only: false
        tty: true
      no_log: true
      when: duckdns_domain != ""


    - name: Nextcloud onlyoffice and talk scripts (clear)
      ansible.builtin.file:
        path: "{{ project_directory }}/nextcloud_application/nextcloud-{{ item }}.sh"
        state: absent
      with_items:
        - onlyoffice
        - talk

    - name: Nextcloud onlyoffice (set)
      ansible.builtin.lineinfile:
        path: "{{ project_directory }}/nextcloud_application/nextcloud-onlyoffice.sh"
        create: true
        owner: root
        group: root
        mode: '0500'
        line: "{{ item }}"
      no_log: true
      with_items:
        - "#!/bin/bash"
        - "# install and configure onlyoffice connector"
        - "docker exec --user www-data cloudoffice_nextcloud php occ app:install onlyoffice"
        - "docker exec --user www-data cloudoffice_nextcloud php occ app:enable onlyoffice"
        - "docker exec --user www-data cloudoffice_nextcloud php occ config:system:set onlyoffice DocumentServerUrl --value='https://{% if duckdns_domain != '' %}{{ duckdns_domain }}:{{ web_port }}/{% else %}{{ instance_public_ip }}:{{ oo_port }}{% endif %}/'"
        - "docker exec --user www-data cloudoffice_nextcloud php occ config:system:set onlyoffice verify_peer_off --value=true --type=boolean"
        - "docker exec --user www-data cloudoffice_nextcloud php occ config:app:set onlyoffice disable_certificate_verification --value='yes'"
        - "docker exec --user www-data cloudoffice_nextcloud php occ config:app:set onlyoffice jwt_secret --value {{ oo_password }}"

    - name: Nextcloud talk (set)
      ansible.builtin.lineinfile:
        path: "{{ project_directory }}/nextcloud_application/nextcloud-talk.sh"
        create: true
        owner: root
        group: root
        mode: '0500'
        line: "{{ item }}"
      with_items:
        - "#!/bin/bash"
        - "# install spreed (talk)"
        - "docker exec --user www-data cloudoffice_nextcloud php occ app:install spreed"
        - "docker exec --user www-data cloudoffice_nextcloud php occ app:enable spreed"

    - name: Wait for nextcloud 200OK
      ansible.builtin.uri:
        url: "{% if duckdns_domain != '' %}https://{{ duckdns_domain }}:{{ web_port }}/nc/login{% else %}https://127.0.0.1:{{ web_port }}/login{% endif %}"
        status_code: 200
        validate_certs: false
      register: nc_wait_result
      until: nc_wait_result.status == 200
      retries: 180
      delay: 1

    - name: Nextcloud onlyoffice and talk (execute)
      ansible.builtin.shell:
        cmd: "{{ project_directory }}/nextcloud_application/nextcloud-{{ item }}.sh"
      args:
        executable: /bin/bash
      with_items:
        - onlyoffice
        - talk

    - name: Clear service and timer files
      ansible.builtin.file:
        path: "/etc/systemd/system/nextcloudcron.{{ item }}"
        state: absent
      with_items:
        - service
        - timer

    - name: Nextcloud background jobs systemd service
      ansible.builtin.lineinfile:
        path: /etc/systemd/system/nextcloudcron.service
        create: true
        owner: root
        group: root
        mode: '0644'
        line: "{{ item }}"
      with_items:
        - "[Unit]"
        - "Description=Nextcloud cron.php service"
        - " "
        - "[Service]"
        - "User=root"
        - "ExecStart=/usr/bin/docker exec -u www-data cloudoffice_nextcloud /bin/bash -c '/usr/local/bin/php -f /var/www/html/cron.php'"
        - "  "
        - "[Install]"
        - "WantedBy=basic.target"

    - name: Nextcloud background jobs systemd timer
      ansible.builtin.lineinfile:
        path: /etc/systemd/system/nextcloudcron.timer
        create: true
        owner: root
        group: root
        mode: '0644'
        line: "{{ item }}"
      with_items:
        - "[Unit]"
        - "Description=Nextcloud cron.php via Timer"
        - " "
        - "[Timer]"
        - "OnBootSec=5min"
        - "OnUnitActiveSec=5min"
        - "Unit=nextcloudcron.service"
        - "  "
        - "[Install]"
        - "WantedBy=timers.target"

    - name: Nextcloud background jobs start/enable
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
        daemon_reload: true
      with_items:
        - nextcloudcron.timer
        - nextcloudcron.service

    - name: Playbook Summary
      ansible.builtin.debug:
        msg:
          - "CloudOffice completed installation!"
          - "Nextcloud WebUI: https://{% if instance_public_ip is not defined %}{{ ansible_default_ipv4.address }}{% else %}{{ instance_public_ip }}{% endif %}:{{ web_port }}"
